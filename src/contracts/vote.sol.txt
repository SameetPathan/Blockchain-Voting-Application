pragma solidity 0.5.16;
pragma experimental ABIEncoderV2;

contract Contest {
    struct Contestant {
        uint256 id;
        string name;
        uint256 voteCount;
        string party;
        uint256 age;
        string qualification;
    }

    struct Voter {
        bool hasVoted;
        uint256 vote;
        bool isRegistered;
    }

    address public admin;
    mapping(uint256 => Contestant) public contestants;
    mapping(address => Voter) public voters;
    uint256 public contestantsCount;
    enum PHASE {
        reg,
        voting,
        done
    }
    PHASE public state;

    uint256 public winner; // Change the type to uint

    // Event to emit winner details
    event WinnerDeclared(
        uint256 id,
        string name,
        uint256 voteCount,
        string party,
        uint256 age,
        string qualification
    );

    modifier onlyAdmin() {
        require(msg.sender == admin);
        _;
    }

    modifier validState(PHASE x) {
        require(state == x);
        _;
    }

    constructor() public {
        admin = msg.sender;
        state = PHASE.reg;
    }

    function changeState(PHASE x) public {
        state = x;
    }

    function addContestant(
        string memory _name,
        string memory _party,
        uint256 _age,
        string memory _qualification
    ) public validState(PHASE.reg) {
        contestantsCount++;
        contestants[contestantsCount] = Contestant(
            contestantsCount,
            _name,
            0,
            _party,
            _age,
            _qualification
        );
    }

    function voterRegistration() public validState(PHASE.reg) {
        voters[msg.sender].isRegistered = true;
    }

    function vote(uint256 _contestantId) public validState(PHASE.voting) {
        require(voters[msg.sender].isRegistered, "Voter is not registered.");
        require(!voters[msg.sender].hasVoted, "Voter has already voted.");
        require(
            _contestantId > 0 && _contestantId <= contestantsCount,
            "Invalid contestant ID."
        );

        contestants[_contestantId].voteCount++;
        voters[msg.sender].hasVoted = true;
        voters[msg.sender].vote = _contestantId;
    }

    function getAllContestants()
        public
        view
        returns (
            uint256[] memory,
            string[] memory,
            uint256[] memory,
            string[] memory,
            uint256[] memory,
            string[] memory
        )
    {
        uint256[] memory ids = new uint256[](contestantsCount);
        string[] memory names = new string[](contestantsCount);
        uint256[] memory voteCounts = new uint256[](contestantsCount);
        string[] memory parties = new string[](contestantsCount);
        uint256[] memory ages = new uint256[](contestantsCount);
        string[] memory qualifications = new string[](contestantsCount);

        for (uint256 i = 1; i <= contestantsCount; i++) {
            Contestant memory contestant = contestants[i];
            ids[i - 1] = contestant.id;
            names[i - 1] = contestant.name;
            voteCounts[i - 1] = contestant.voteCount;
            parties[i - 1] = contestant.party;
            ages[i - 1] = contestant.age;
            qualifications[i - 1] = contestant.qualification;
        }

        return (ids, names, voteCounts, parties, ages, qualifications);
    }

    function resetContest() public onlyAdmin {
    // Reset contestants
    for (uint256 i = 1; i <= contestantsCount; i++) {
        delete contestants[i];
    }
    contestantsCount = 0;

    // Reset voters
    address[] memory voterAddresses = new address[](contestantsCount);
    uint256 numVoters = 0;
    for (uint256 i = 1; i <= contestantsCount; i++) {
        if (voters[address(i)].isRegistered) {
            delete voters[address(i)];
            voterAddresses[numVoters] = address(i);
            numVoters++;
        }
    }
    for (uint256 i = 0; i < numVoters; i++) {
        delete voters[voterAddresses[i]];
    }

    // Reset state
    state = PHASE.reg;
}

    function getCurrentState() public view returns (PHASE) {
        return state;
    }

    function calculateResult() public onlyAdmin {
        require(state == PHASE.done, "Voting phase must be over.");

        uint256 maxVotes = 0;

        // Find the contestant with the maximum votes
        for (uint256 i = 1; i <= contestantsCount; i++) {
            if (contestants[i].voteCount > maxVotes) {
                maxVotes = contestants[i].voteCount;
                winner = i; // Store the ID of the winner
            }
        }

        // Emit winner details
        emit WinnerDeclared(
            contestants[winner].id,
            contestants[winner].name,
            contestants[winner].voteCount,
            contestants[winner].party,
            contestants[winner].age,
            contestants[winner].qualification
        );
    }

    // Function to get winner details
    function getWinnerDetails()
        public
        view
        returns (
            uint256 id,
            string memory name,
            uint256 voteCount,
            string memory party,
            uint256 age,
            string memory qualification
        )
    {
        require(winner != 0, "Winner not declared yet.");
        return (
            contestants[winner].id,
            contestants[winner].name,
            contestants[winner].voteCount,
            contestants[winner].party,
            contestants[winner].age,
            contestants[winner].qualification
        );
    }
}
